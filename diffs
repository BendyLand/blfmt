Function: fn handle_argument_list(root: Node, src: String) -> String {
--- 
+++ 
@@ -11,6 +11,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
             },
             "call_expression" => {
                 let call_expression = handle_call_expression(node, src.clone());
@@ -76,9 +80,22 @@
                 let concatenated_string = handle_concatenated_string(node, src.clone());
                 result += concatenated_string.as_str();
             },
-            "ERROR" => {
-                let error = handle_error(node, src.clone());
-                result += error.as_str();
+            "raw_string_literal" => {
+                let raw_string_literal = handle_raw_string_literal(node, src.clone());
+                result += raw_string_literal.as_str();
+            },
+            "initializer_list" => {
+                let initializer_list = handle_initializer_list(node, src.clone());
+                result += initializer_list.as_str();
+            },
+            "new_expression" => {
+                let new_expression = handle_new_expression(node, src.clone());
+                result += new_expression.as_str();
+            },
+            "lambda_expression" => {
+                let mut lambda_expression = handle_lambda_expression(node, src.clone());
+                lambda_expression = utils::add_all_leading_tabs(lambda_expression).trim_start().to_string();
+                result += lambda_expression.as_str();
             },
             _ => println!("You shouldn't be here (argument_list): {}\n", node.grammar_name()),
         }

Function: fn handle_array_declarator(root: Node, src: String) -> String {
--- 
+++ 
@@ -18,10 +18,6 @@
                 let binary_expression = handle_binary_expression(node, src.clone());
                 parts.push(binary_expression);
             },
-            "array_declarator" => {
-                let array_declarator = handle_array_declarator(node, src.clone());
-                parts.push(array_declarator);
-            },
             "[" => parts.push("[".to_string()),
             "]" => parts.push("]".to_string()),
             _ => println!("You shouldn't be here (array_declarator): {}\n", node.grammar_name()),

Function: fn handle_assignment_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -13,9 +13,6 @@
             ">>=" => parts.push("=".to_string()),
             "&=" => parts.push("=".to_string()),
             "|=" => parts.push("=".to_string()),
-            "null" => parts.push("NULL".to_string()),
-            "true" => parts.push("true".to_string()),
-            "false" => parts.push("false".to_string()),
             "assignment_expression" => {
                 let assignment_expression = handle_inner_assignment_expression(node, src.clone());
                 parts.push(assignment_expression);
@@ -44,56 +41,21 @@
                 let char_literal = handle_char_literal(node, src.clone());
                 parts.push(char_literal);
             },
-            "cast_expression" => {
-                let cast_expression = handle_cast_expression(node, src.clone());
-                parts.push(cast_expression);
+            "string_literal" => {
+                let string_literal = handle_string_literal(node, src.clone());
+                parts.push(string_literal);
             },
             "binary_expression" => {
                 let binary_expression = handle_binary_expression(node, src.clone());
                 parts.push(binary_expression);
             },
-            "unary_expression" => {
-                let unary_expression = handle_unary_expression(node, src.clone());
-                parts.push(unary_expression);
-            },
-            "pointer_expression" => {
-                let pointer_expression = handle_pointer_expression(node, src.clone());
-                parts.push(pointer_expression);
-            },
             "conditional_expression" => {
                 let conditional_expression = handle_conditional_expression(node, src.clone());
                 parts.push(conditional_expression);
             },
-            "parenthesized_expression" => {
-                let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
-                parts.push(parenthesized_expression);
-            },
-            "sizeof_expression" => {
-                let sizeof_expression = handle_sizeof_expression(node, src.clone());
-                parts.push(sizeof_expression);
-            },
-            "ERROR" => {
-                println!(
-                    "Warning: encountered ERROR node, likely due to preprocessor macro interrupt.\n\t--> {:?}\n",
-                    node.utf8_text(src.as_bytes()).unwrap_or("[unreadable]")
-                );
-                /*
-                This is likely a preproc macros mid-declaration:
-                        blacklist_keyring =                                                                                   
-                                keyring_alloc(".blacklist",                                                                   
-                                              GLOBAL_ROOT_UID, GLOBAL_ROOT_GID, current_cred(),                               
-                                              KEY_POS_VIEW | KEY_POS_READ | KEY_POS_SEARCH |                                  
-                                              KEY_POS_WRITE |                                                                 
-                                              KEY_USR_VIEW | KEY_USR_READ | KEY_USR_SEARCH                                    
-                #ifdef CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE                                                                    
-                                              | KEY_USR_WRITE                                                                 
-                #endif                                                                                                        
-                                              , KEY_ALLOC_NOT_IN_QUOTA |                                                      
-                                              KEY_ALLOC_SET_KEEP,                                                             
-                                              restriction, NULL);
-                */
-                // let error = handle_error(node, src.clone());
-                // parts.push(error);
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                parts.push(qualified_identifier);
             },
             _ => println!("You shouldn't be here (assignment_expression): {}: {}\n", node.grammar_name(), node.utf8_text(src.as_bytes()).unwrap()),
         }

Function: fn handle_binary_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 parts.push(identifier);
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                parts.push(qualified_identifier);
             },
             "parenthesized_expression" => {
                 let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
@@ -31,26 +35,8 @@
                 parts.push(call_expression);
             },
             "ERROR" => {
-                /*
-                    This is likely the condition being checked by some kind
-                    of preproc check mid-expression. In:
-
-                    keyring_alloc(".blacklist",                                                                   
-                                  GLOBAL_ROOT_UID, GLOBAL_ROOT_GID, current_cred(),                               
-                                  KEY_POS_VIEW | KEY_POS_READ | KEY_POS_SEARCH |                                  
-                                  KEY_POS_WRITE |                                                                 
-                                  KEY_USR_VIEW | KEY_USR_READ | KEY_USR_SEARCH                                    
-                #ifdef CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE                                                                    
-                                 | KEY_USR_WRITE                                                                 
-                #endif                                                                                                        
-                                  , KEY_ALLOC_NOT_IN_QUOTA |                                                      
-                                  KEY_ALLOC_SET_KEEP,                                                             
-                                  restriction, NULL);
-
-                    The ERROR would be CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE                    
-                */
-                // let error = handle_error(node, src.clone());
-                // parts.push(error);
+                let error = handle_error(node, src.clone());
+                parts.push(error);
             },
             "update_expression" => {
                 let update_expression = handle_update_expression(node, src.clone());
@@ -65,8 +51,7 @@
                 parts.push(binary_expression);
             },
             "pointer_expression" => {
-                let mut pointer_expression = handle_pointer_expression(node, src.clone());
-                pointer_expression = utils::remove_dereference_spaces(pointer_expression);
+                let pointer_expression = handle_pointer_expression(node, src.clone());
                 parts.push(pointer_expression);
             },
             "cast_expression" => {
@@ -77,7 +62,17 @@
                 let unary_expression = handle_unary_expression(node, src.clone());
                 parts.push(unary_expression);
             },
+            "string_literal" => {
+                let string_literal = handle_string_literal(node, src.clone());
+                parts.push(string_literal);
+            },
+            "preproc_defined" => {
+                let preproc_defined = handle_preproc_defined(node, src.clone());
+                parts.push(preproc_defined);
+            },
             "null" => parts.push("NULL".to_string()),
+            "true" => parts.push("true".to_string()),
+            "false" => parts.push("false".to_string()),
             "+" => parts.push("+".to_string()),
             "-" => parts.push("-".to_string()),
             "*" => parts.push("*".to_string()),
@@ -100,7 +95,6 @@
             _ => println!("You shouldn't be here (binary_expression): {}\n", node.grammar_name()),
         }
     }
-    let mut result = parts.join(" ");
-    result = utils::remove_unnecessary_spaces(&result);
+    let result = parts.join(" ");
     return result;
 }

Function: fn handle_call_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -10,6 +10,10 @@
                             let identifier = handle_identifier(subnode, src.clone());
                             temp += identifier.as_str();
                         },
+                        "qualified_identifier" => {
+                            let qualified_identifier = handle_qualified_identifier(subnode, src.clone());
+                            temp += qualified_identifier.as_str();
+                        },
                         "argument_list" => {
                             let argument_list = handle_argument_list(subnode, src.clone());
                             temp += argument_list.as_str();
@@ -17,6 +21,10 @@
                         "parenthesized_expression" => {
                             let parenthesized_expression = handle_parenthesized_expression(subnode, src.clone());
                             temp += parenthesized_expression.as_str();
+                        },
+                        "field_expression" => {
+                            let field_expression = handle_field_expression(subnode, src.clone());
+                            temp += field_expression.as_str();
                         },
                         _ => println!("You shouldn't be here (middle of call_expression): {}\n", subnode.grammar_name()),
                     }
@@ -27,6 +35,10 @@
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
             },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
+            },
             "argument_list" => {
                 let argument_list = handle_argument_list(node, src.clone());
                 result += argument_list.as_str();
@@ -35,6 +47,14 @@
                 let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
                 result += parenthesized_expression.as_str();
             },
+            "field_expression" => {
+                let field_expression = handle_field_expression(node, src.clone());
+                result += field_expression.as_str();
+            },
+            "template_function" => {
+                let template_function = handle_template_function(node, src.clone());
+                result += template_function.as_str();
+            },
             ";" => result += ";",
             _ => println!("You shouldn't be here (call_expression): {}\n", node.grammar_name()),
         }

Function: fn handle_case_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -36,6 +36,10 @@
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
             },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
+            },
             "switch_statement" => {
                 let switch_statement = handle_switch_statement(node, src.clone());
                 result += format!("{}\n", switch_statement).as_str();
@@ -55,10 +59,6 @@
                 let comment = handle_comment(node, src.clone());
                 result += format!("\t{}\n", comment).as_str();
             },
-            "labeled_statement" => {
-                let labeled_statment = handle_labeled_statement(node, src.clone());
-                result += format!("\t{}\n", labeled_statment).as_str();
-            },
             ":" => {
                 result = result.trim_end().to_string();
                 result += ": \n"

Function: fn handle_compound_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -84,6 +84,11 @@
                 for_statement = utils::add_all_leading_tabs(for_statement);
                 result += format!("{}\n", for_statement).as_str();
             },
+            "for_range_loop" => {
+                let mut for_range_loop = handle_for_range_loop(node, src.clone());
+                for_range_loop = utils::add_all_leading_tabs(for_range_loop);
+                result += format!("{}\n", for_range_loop).as_str();
+            },
             "preproc_def" => {
                 let mut preproc_def = handle_preproc_def(node, src.clone());
                 preproc_def = utils::add_all_leading_tabs(preproc_def);
@@ -106,7 +111,6 @@
                 result += format!("\t{}\n", error).as_str();
             },
             "parameter_list" => {
-                dbg!("Here (parameter_list)");
                 let parameter_list = handle_parameter_list(node, src.clone());
                 result += format!("\t{}\n", parameter_list).as_str();
             },
@@ -133,6 +137,11 @@
                 do_statement = utils::add_all_leading_tabs(do_statement);
                 result += format!("{}\n", do_statement).as_str();
             },
+            "try_statement" => {
+                let mut try_statement = handle_try_statement(node, src.clone());
+                try_statement = utils::add_all_leading_tabs(try_statement);
+                result += format!("{}\n", try_statement).as_str();
+            },
             "return" => {
                 dbg!(node.utf8_text(src.as_bytes()).unwrap());
             },

Function: fn handle_conditional_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -6,13 +6,13 @@
                 let identifier = handle_identifier(node, src.clone());
                 parts.push(identifier);
             },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                parts.push(qualified_identifier);
+            },
             "call_expression" => {
                 let call_expression = handle_call_expression(node, src.clone());
                 parts.push(call_expression);
-            },
-            "cast_expression" => {
-                let cast_expression = handle_cast_expression(node, src.clone());
-                parts.push(cast_expression);
             },
             "field_expression" => {
                 let field_expression = handle_field_expression(node, src.clone());
@@ -46,6 +46,12 @@
                 let char_literal = handle_char_literal(node, src.clone());
                 parts.push(char_literal);
             },
+            "string_literal" => {
+                let string_literal = handle_string_literal(node, src.clone());
+                parts.push(string_literal);
+            },
+            "true" => parts.push("true".to_string()),
+            "false" => parts.push("false".to_string()),
             ":" => parts.push(":".to_string()),
             "?" => parts.push("?".to_string()),
             _ => println!("You shouldn't be here (conditional_expression): {}\n", node.grammar_name()),

Function: fn handle_declaration(root: Node, src: String) -> String {
--- 
+++ 
@@ -51,6 +51,15 @@
                 let sized_type_specifier = handle_sized_type_specifier(node, src.clone());
                 parts.push(sized_type_specifier);
             },
+            "template_type" => {
+                let template_type = handle_template_type(node, src.clone());
+                parts.push(template_type);
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                parts.push(qualified_identifier);
+            },
+            "placeholder_type_specifier" => parts.push("auto".to_string()),
             ";" => parts.push(";".to_string()),
             "," => parts.push(",".to_string()),
             _ => println!("You shouldn't be here (declaration): {}\n", node.grammar_name()),
@@ -59,6 +68,11 @@
     result = parts.join(" ");
     if result.contains(",") { result = utils::remove_whitespace_before_commas(&result); }
     result = utils::remove_unnecessary_spaces(&result);
+    if result.contains("= \t[") {
+        let idx = result.find("= \t[").unwrap();
+        result.remove(idx+2);
+    }
     if result.contains("**") { result = utils::remove_pointer_spaces(result); }
+    if result.contains("::") { result = utils::remove_object_constructor_space(result); }
     return result;
 }

Function: fn handle_enum_specifier(root: Node, src: String) -> String {
--- 
+++ 
@@ -8,7 +8,7 @@
             },
             "enumerator_list" => {
                 let enumerator_list = handle_enumerator_list(node, src.clone());
-                result += format!("{} ", enumerator_list).as_str();
+                result += format!("\n{}", enumerator_list).as_str();
             },
             "field_declaration_list" => {
                 let field_declaration_list = handle_field_declaration_list(node, src.clone());
@@ -21,6 +21,7 @@
                 }
             },
             "enum" => result += "enum ",
+            "class" => result += "class ",
             _ => println!("You shouldn't be here (enum_specifier): {}\n", node.grammar_name()),
         }
     }

Function: fn handle_expression_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -24,26 +24,17 @@
                 result = handle_pointer_expression(node, src.clone());
             },
             "ERROR" => {
-                    println!(
-                        "Warning: encountered ERROR node, likely due to preprocessor macro interrupt.\n\t--> {:?}\n",
-                        node.utf8_text(src.as_bytes()).unwrap_or("[unreadable]")
-                    );
-                /*
-                This is likely a preproc macros mid-declaration:
-                        blacklist_keyring =                                                                                   
-                                keyring_alloc(".blacklist",                                                                   
-                                              GLOBAL_ROOT_UID, GLOBAL_ROOT_GID, current_cred(),                               
-                                              KEY_POS_VIEW | KEY_POS_READ | KEY_POS_SEARCH |                                  
-                                              KEY_POS_WRITE |                                                                 
-                                              KEY_USR_VIEW | KEY_USR_READ | KEY_USR_SEARCH                                    
-                #ifdef CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE                                                                    
-                                              | KEY_USR_WRITE                                                                 
-                #endif                                                                                                        
-                                              , KEY_ALLOC_NOT_IN_QUOTA |                                                      
-                                              KEY_ALLOC_SET_KEEP,                                                             
-                                              restriction, NULL);
-                */
-                // result = handle_error(node, src.clone());
+                result = handle_error(node, src.clone());
+            },
+            "gnu_asm_expression" => {
+                result = handle_gnu_asm_expression(node, src.clone());
+            },
+            "lambda_expression" => {
+                result = handle_lambda_expression(node, src.clone());
+                let head = result.split("\n").collect::<Vec<&str>>()[0].to_string();
+                let mut temp = result.split("\n").collect::<Vec<&str>>()[1..].join("\n");
+                temp = utils::add_all_leading_tabs(temp);
+                result = format!("{}\n{}", head, temp);
             },
             ";" => result += ";",
             _ => println!("You shouldn't be here (expression_statement): {}\n", node.grammar_name()),

Function: fn handle_field_declaration(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += format!("{} ", identifier).as_str();
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += format!("{} ", qualified_identifier).as_str();
             },
             "primitive_type" => {
                 let primitive_type = handle_primitive_type(node, src.clone());
@@ -18,6 +22,14 @@
                 let pointer_declarator = handle_pointer_declarator(node, src.clone());
                 result += format!("{} ", pointer_declarator).as_str();
             },
+            "function_declarator" => {
+                let function_declarator = handle_function_declarator(node, src.clone());
+                result += format!("{} ", function_declarator).as_str();
+            },
+            "storage_class_specifier" => {
+                let storage_class_specifier = handle_storage_class_specifier(node, src.clone());
+                result += format!("{} ", storage_class_specifier).as_str();
+            },
             ";" => result += ";",
             "," => result += ", ",
             _ => println!("You shouldn't be here (field_declaration): {}\n", node.grammar_name()),

Function: fn handle_field_declaration_list(root: Node, src: String) -> String {
--- 
+++ 
@@ -4,27 +4,27 @@
     for node in root.children(&mut root.walk()) {
         match node.grammar_name() {
             "field_declaration" => {
-                let mut field_declaration = handle_field_declaration(node, src.clone());
-                if field_declaration.contains("*") { 
-                    field_declaration = utils::switch_pointer_spaces(field_declaration); 
-                }
-                if temp.len() > 0 {
-                    parts.push(temp);
-                    temp = String::new();
-                }
-                else {
-                    temp += format!("\t{}", field_declaration).as_str();
-                }
+                let field_declaration = handle_field_declaration(node, src.clone());
+                parts.push(format!("\t{}", field_declaration));
             },
             "comment" => {
                 let comment = handle_comment(node, src.clone());
-                temp += format!("\t{}", comment).as_str();
-                parts.push(temp);
-                temp = String::new();
+                parts.push(format!("\t{}", comment));
+            },
+            "access_specifier" => {
+                let access_specifier = handle_access_specifier(node, src.clone());
+                parts.push(access_specifier);
+            },
+            "function_definition" => {
+                let mut function_definition = handle_function_definition(node, src.clone());
+                function_definition = utils::add_all_leading_tabs(function_definition);
+                parts.push(function_definition);
             },
             "{" => parts.push("{".to_string()),
             "}" => parts.push("}".to_string()),
-            _ => println!("You shouldn't be here (field_declaration_list): {}\n", node.grammar_name()),
+            ":" => (),
+            ";" => (),
+            _ => println!("You shouldn't be here (field_declaration_list): {}: {}\n", node.grammar_name(), node.utf8_text(src.as_bytes()).unwrap()),
         }
     }
     if temp.len() > 0 {

Function: fn handle_field_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -18,10 +18,7 @@
                 let field_expression = handle_inner_field_expression(node, src.clone());
                 result += field_expression.as_str();
             },
-            "parenthesized_expression" => {
-                let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
-                result += parenthesized_expression.as_str();
-            },
+            "this" => result += "this",
             "->" => result += "->",
             "." => result += ".",
             _ => println!("You shouldn't be here (field_expression): {}\n", node.grammar_name()),

Function: fn handle_for_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -15,52 +15,26 @@
             },
             "update_expression" => {
                 let update_expression = handle_update_expression(node, src.clone());
-                if !reached_compound {
-                    temp += update_expression.as_str();
-                }
-                else {
-                    vec.push(update_expression);
-                }
+                if !reached_compound { temp += update_expression.as_str(); }
+                else { vec.push(update_expression); }
             },
             "assignment_expression" => {
                 let assignment_expression = handle_assignment_expression(node, src.clone());
-                if !reached_compound {
-                    temp += assignment_expression.as_str();
-                }
-                else {
-                    vec.push(assignment_expression);
-                }
+                vec.push(assignment_expression);
             },
             "binary_expression" => {
                 let binary_expression = handle_binary_expression(node, src.clone());
-                if !reached_compound {
-                    temp += binary_expression.as_str();
-                }
-                else {
-                    vec.push(binary_expression);
-                }
+                if !reached_compound { temp += format!(" {}", binary_expression).as_str(); }
+                else { vec.push(binary_expression); }
             },
             "declaration" => {
                 let declaration = handle_declaration(node, src.clone());
-                if !reached_compound {
-                    temp += declaration.as_str();
-                }
-                else {
-                    vec.push(declaration);
-                }
+                if !reached_compound { temp += declaration.as_str(); }
+                else { vec.push(declaration); }
             },
             "expression_statement" => {
                 let expression_statement = handle_expression_statement(node, src.clone());
                 vec.push(expression_statement);
-            },
-            "pointer_expression" => {
-                let mut pointer_expression = handle_pointer_expression(node, src.clone());
-                pointer_expression = utils::remove_dereference_spaces(pointer_expression);
-                temp += pointer_expression.as_str();
-            },
-            "comma_expression" => {
-                let comma_expression = handle_comma_expression(node, src.clone());
-                temp += comma_expression.as_str();
             },
             ";" => temp += "; ",
             "(" => temp += "(",

Function: fn handle_function_declarator(root: Node, src: String) -> String {
--- 
+++ 
@@ -12,6 +12,10 @@
                     "," => temp += ", ",
                     "(" => temp += "(",
                     ")" => temp += ")",
+                    "::" => temp += "::",
+                    "<<" => temp += "<<",
+                    "operator" => temp += "operator",
+                    "const" => temp += " const",
                     "pointer_declarator" => {
                         let pointer_declarator = handle_pointer_declarator(subnode, src.clone());
                         temp += pointer_declarator.as_str();
@@ -33,11 +37,13 @@
                         let comment = handle_comment(node, src.clone());
                         temp += format!("{} ", comment).as_str();
                     },
+                    "..." => temp += " ...",
                     _ => println!("You shouldn't be here (function_declarator): {}\n", subnode.grammar_name()),
                 }
             }
             result += temp.as_str();
         }
     }
+    result = utils::remove_reference_spaces(result);
     return result;
 }

Function: fn handle_function_definition(root: Node, src: String) -> String {
--- 
+++ 
@@ -4,7 +4,9 @@
         match node.grammar_name() {
             "compound_statement" => {
                 let compound_statement = handle_compound_statement(node, src.clone());
-                result += format!("{}\n", compound_statement).as_str();
+                result = result.trim_end().to_string();
+                result = utils::remove_reference_spaces(result);
+                result += format!("\n{}\n", compound_statement).as_str();
             },
             "primitive_type" => {
                 let primitive_type = handle_primitive_type(node, src.clone());
@@ -17,6 +19,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += format!("{} ", identifier).as_str();
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += format!("{} ", qualified_identifier).as_str();
             },
             "ERROR" => {
                 // Usually an unknown specifier, like a custom alias for `static`.
@@ -48,9 +54,24 @@
                 let sized_type_specifier = handle_sized_type_specifier(node, src.clone());
                 result += format!("{} ", sized_type_specifier).as_str();
             },
+            "template_type" => {
+                let template_type = handle_template_type(node, src.clone());
+                result += format!("{} ", template_type).as_str();
+            },
+            "reference_declarator" => {
+                let reference_declarator = handle_reference_declarator(node, src.clone());
+                result += format!("{} ", reference_declarator).as_str();
+            },
+            "field_initializer_list" => {
+                let field_initializer_list = handle_field_initializer_list(node, src.clone());
+                result += format!("{} ", field_initializer_list).as_str();
+                result = result.trim_end().to_string();
+                result += "\n";
+            },
             _ => println!("You shouldn't be here (function_definition): {}\n", node.grammar_name()),
         }
     }
+    result = utils::remove_reference_spaces(result);
     result = utils::ensure_space_after_char(&result, '=');
     result = result.trim_end().to_string();
     return result;

Function: fn handle_if_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -42,6 +42,10 @@
                 let switch_statement = handle_switch_statement(node, src.clone());
                 parts.push(switch_statement);
             },
+            "condition_clause" => {
+                let condition_clause = handle_condition_clause(node, src.clone());
+                parts.push(condition_clause);
+            },
             "break_statement" => {
                 parts.push("break;".to_string());
             },

Function: fn handle_init_declarator(root: Node, src: String) -> String {
--- 
+++ 
@@ -9,10 +9,6 @@
             "number_literal" => {
                 let number_literal = handle_number_literal(node, src.clone());
                 parts.push(number_literal);
-            },
-            "string_literal" => {
-                let string_literal = handle_string_literal(node, src.clone());
-                parts.push(string_literal);
             },
             "call_expression" => {
                 let call_expression = handle_call_expression(node, src.clone());
@@ -62,6 +58,27 @@
                 let array_declarator = handle_array_declarator(node, src.clone());
                 parts.push(array_declarator);
             },
+            "string_literal" => {
+                let string_literal = handle_string_literal(node, src.clone());
+                parts.push(string_literal);
+            },
+            "argument_list" => {
+                let argument_list = handle_argument_list(node, src.clone());
+                parts.push(argument_list);
+            },
+            "char_literal" => {
+                let char_literal = handle_char_literal(node, src.clone());
+                parts.push(char_literal);
+            },
+            "new_expression" => {
+                let new_expression = handle_new_expression(node, src.clone());
+                parts.push(new_expression);
+            },
+            "lambda_expression" => {
+                let mut lambda_expression = handle_lambda_expression(node, src.clone());
+                lambda_expression = utils::add_all_leading_tabs(lambda_expression);
+                parts.push(lambda_expression);
+            },
             "=" => parts.push("=".to_string()),
             "false" => parts.push("false".to_string()),
             "true" => parts.push("true".to_string()),

Function: fn handle_initializer_list(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
             },
             "number_literal" => {
                 let number_literal = handle_number_literal(node, src.clone());
@@ -22,13 +26,21 @@
                 let initializer_list = handle_initializer_list(node, src.clone());
                 result += initializer_list.as_str();
             },
-            "initializer_pair" => {
-                let initializer_pair = handle_initializer_pair(node, src.clone());
-                result += initializer_pair.as_str();
-            },
             "string_literal" => {
                 let string_literal = handle_string_literal(node, src.clone());
                 result += string_literal.as_str();
+            },
+            "call_expression" => {
+                let call_expression = handle_call_expression(node, src.clone());
+                result += call_expression.as_str();
+            },
+            "conditional_expression" => {
+                let conditional_expression = handle_conditional_expression(node, src.clone());
+                result += conditional_expression.as_str();
+            },
+            "binary_expression" => {
+                let binary_expression = handle_binary_expression(node, src.clone());
+                result += binary_expression.as_str();
             },
             "{" => result += "{",
             "}" => result += "}",

Function: fn handle_inner_assignment_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -34,6 +34,10 @@
                 let char_literal = handle_char_literal(node, src.clone());
                 parts.push(char_literal);
             },
+            "string_literal" => {
+                let string_literal = handle_string_literal(node, src.clone());
+                parts.push(string_literal);
+            },
             "subscript_expression" => {
                 let subscript_expression = handle_subscript_expression(node, src.clone());
                 parts.push(subscript_expression);
@@ -59,23 +63,8 @@
                 parts.push(sizeof_expression);
             },
             "ERROR" => {
-                /*
-                This is likely a preproc macros mid-declaration:
-                        blacklist_keyring =                                                                                   
-                                keyring_alloc(".blacklist",                                                                   
-                                              GLOBAL_ROOT_UID, GLOBAL_ROOT_GID, current_cred(),                               
-                                              KEY_POS_VIEW | KEY_POS_READ | KEY_POS_SEARCH |                                  
-                                              KEY_POS_WRITE |                                                                 
-                                              KEY_USR_VIEW | KEY_USR_READ | KEY_USR_SEARCH                                    
-                #ifdef CONFIG_SYSTEM_BLACKLIST_AUTH_UPDATE                                                                    
-                                              | KEY_USR_WRITE                                                                 
-                #endif                                                                                                        
-                                              , KEY_ALLOC_NOT_IN_QUOTA |                                                      
-                                              KEY_ALLOC_SET_KEEP,                                                             
-                                              restriction, NULL);
-                */
-                // let error = handle_error(node, src.clone());
-                // parts.push(error);
+                let error = handle_error(node, src.clone());
+                parts.push(error);
             },
             "true" => parts.push("true".to_string()),
             "false" => parts.push("false".to_string()),

Function: fn handle_inner_binary_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 parts.push(identifier);
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                parts.push(qualified_identifier);
             },
             "field_expression" => {
                 let field_expression = handle_field_expression(node, src.clone());
@@ -46,8 +50,14 @@
                 let subscript_expression = handle_subscript_expression(node, src.clone());
                 parts.push(subscript_expression);
             },
-            "true" => parts.push("true".to_string()),
-            "false" => parts.push("false".to_string()),
+            "string_literal" => {
+                let string_literal = handle_string_literal(node, src.clone());
+                parts.push(string_literal);
+            },
+            "preproc_defined" => {
+                let preproc_defined = handle_preproc_defined(node, src.clone());
+                parts.push(preproc_defined);
+            },
             "+" => parts.push("+".to_string()),
             "-" => parts.push("-".to_string()),
             "*" => parts.push("*".to_string()),

Function: fn handle_inner_compound_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -69,15 +69,19 @@
                 for_statement = utils::add_all_leading_tabs(for_statement);
                 parts.push(for_statement);
             },
+            "for_range_loop" => {
+                let mut for_range_loop = handle_for_range_loop(node, src.clone());
+                for_range_loop = utils::add_all_leading_tabs(for_range_loop);
+                parts.push(for_range_loop);
+            },
             "labeled_statement" => {
-                let mut labeled_statement = handle_labeled_statement(node, src.clone());
-                labeled_statement = utils::add_all_leading_tabs(labeled_statement);
+                let labeled_statement = handle_labeled_statement(node, src.clone());
                 parts.push(labeled_statement);
             },
-            "ERROR" => {
-                let mut error = handle_error(node, src.clone());
-                error = utils::add_all_leading_tabs(error);
-                parts.push(error);
+            "preproc_if" => {
+                let mut preproc_if = handle_preproc_if(node, src.clone());
+                preproc_if = utils::add_all_leading_tabs(preproc_if);
+                parts.push(preproc_if);
             },
             "{" => parts.push("{".to_string()),
             "}" => parts.push("}".to_string()),

Function: fn handle_inner_field_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -3,6 +3,7 @@
     for node in root.children(&mut root.walk()) {
         match node.grammar_name() {
             "->" => result += "->",
+            "." => result += ".",
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
@@ -15,6 +16,7 @@
                 let call_expression = handle_call_expression(node, src.clone());
                 result += call_expression.as_str();
             },
+            "this" => result += "this",
             _ => println!("You shouldn't be here (inner_field_expression): {}\n", node.grammar_name()),
         }
     }

Function: fn handle_labeled_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -4,7 +4,7 @@
         match node.grammar_name() {
             "expression_statement" => {
                 let expression_statement = handle_expression_statement(node, src.clone());
-                result += format!("\n\t{}", expression_statement).as_str();
+                result += expression_statement.as_str();
             },
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
@@ -12,20 +12,16 @@
             },
             "return_statement" => {
                 let return_statement = handle_return_statement(node, src.clone());
-                result += format!("\n\t{}", return_statement).as_str();
+                result += return_statement.as_str();
             },
             "if_statement" => {
                 let if_statement = handle_if_statement(node, src.clone());
-                result += format!("\n\t{}", if_statement).as_str();
+                result += if_statement.as_str();
             },
-            "switch_statement" => {
-                let switch_statement = handle_switch_statement(node, src.clone());
-                // eprintln!("{}", &switch_statement);
-                result += format!("\n\t{}", switch_statement).as_str();
-            },
-            ":" => result += ": ",
+            ":" => result += ":\n",
             _ => println!("You shouldn't be here (labeled_statement): {}\n", node.grammar_name()),
         }
     }
+    result = utils::add_all_leading_tabs(result);
     return result;
 }

Function: fn handle_parameter_declaration(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 parts.push(identifier);
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                parts.push(qualified_identifier);
             },
             "pointer_declarator" => {
                 let pointer_declarator = handle_pointer_declarator(node, src.clone());
@@ -26,25 +30,17 @@
                 let abstract_array_declarator = handle_abstract_array_declarator(node, src.clone());
                 parts.push(abstract_array_declarator);
             },
-            "abstract_pointer_declarator" => {
-                let abstract_pointer_declarator = handle_abstract_pointer_declarator(node, src.clone());
-                parts.push(abstract_pointer_declarator);
-            },
             "sized_type_specifier" => {
                 let sized_type_specifier = handle_sized_type_specifier(node, src.clone());
                 parts.push(sized_type_specifier);
             },
-            "array_declarator" => {
-                let array_declarator = handle_array_declarator(node, src.clone());
-                parts.push(array_declarator);
+            "abstract_reference_declarator" => {
+                let abstract_reference_declarator = handle_abstract_reference_declarator(node, src.clone());
+                parts.push(abstract_reference_declarator);
             },
-            "enum_specifier" => {
-                let enum_specifier = handle_enum_specifier(node, src.clone());
-                parts.push(enum_specifier);
-            },
-            "union_specifier" => {
-                let union_specifier = handle_union_specifier(node, src.clone());
-                parts.push(union_specifier);
+            "reference_declarator" => {
+                let reference_declarator = handle_reference_declarator(node, src.clone());
+                parts.push(reference_declarator);
             },
             _ => println!("You shouldn't be here (parameter_declaration): {}\n", node.grammar_name()),
         }

Function: fn handle_parameter_list(root: Node, src: String) -> String {
--- 
+++ 
@@ -1,9 +1,4 @@
 fn handle_parameter_list(root: Node, src: String) -> String {
-    let mut result = String::new();
-    for node in root.children(&mut root.walk()) {
-        match node.grammar_name() {
-            _ => println!("Parameter list: {}: {}\n", node.grammar_name(), node.utf8_text(src.as_bytes()).unwrap_or("")),
-        }
-    }
+    let result = root.utf8_text(src.as_bytes()).unwrap().to_string();
     return result;
 }

Function: fn handle_parenthesized_declarator(root: Node, src: String) -> String {
--- 
+++ 
@@ -6,6 +6,10 @@
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
             },
+            "pointer_expression" => {
+                let pointer_expression = handle_pointer_expression(node, src.clone());
+                result += pointer_expression.as_str();
+            },
             "(" => result += "(",
             ")" => result += ")",
             _ => println!("You shouldn't be here (parenthesized_declarator): {}\n", node.grammar_name()),

Function: fn handle_parenthesized_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,46 +5,6 @@
             "call_expression" => {
                 let call_expression = handle_call_expression(node, src.clone());
                 result += call_expression.as_str();
-            },
-            "identifier" => {
-                let identifier = handle_identifier(node, src.clone());
-                result += identifier.as_str();
-            },
-            "binary_expression" => {
-                let binary_expression = handle_binary_expression(node, src.clone());
-                result += binary_expression.as_str();
-            },
-            "assignment_expression" => {
-                let assignment_expression = handle_assignment_expression(node, src.clone());
-                result += assignment_expression.as_str();
-            },
-            "parenthesized_expression" => {
-                let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
-                result += parenthesized_expression.as_str();
-            },
-            "pointer_expression" => {
-                let pointer_expression = handle_pointer_expression(node, src.clone());
-                result += pointer_expression.as_str();
-            },
-            "cast_expression" => {
-                let cast_expression = handle_cast_expression(node, src.clone());
-                result += cast_expression.as_str();
-            },
-            "field_expression" => {
-                let field_expression = handle_field_expression(node, src.clone());
-                result += field_expression.as_str();
-            },
-            "unary_expression" => {
-                let unary_expression = handle_unary_expression(node, src.clone());
-                result += unary_expression.as_str();
-            },
-            "conditional_expression" => {
-                let conditional_expression = handle_conditional_expression(node, src.clone());
-                result += conditional_expression.as_str();
-            },
-            "concatenated_string" => {
-                let concatenated_string = handle_concatenated_string(node, src.clone());
-                result += concatenated_string.as_str();
             },
             "char_literal" => {
                 let char_literal = handle_char_literal(node, src.clone());
@@ -58,13 +18,25 @@
                 let update_expression = handle_update_expression(node, src.clone());
                 result += update_expression.as_str();
             },
-            "subscript_expression" => {
-                let subscript_expression = handle_subscript_expression(node, src.clone());
-                result += subscript_expression.as_str();
+            "binary_expression" => {
+                let binary_expression = handle_binary_expression(node, src.clone());
+                result += binary_expression.as_str();
             },
-            "ERROR" => {
-                let error = handle_error(node, src.clone());
-                result += format!("{} ", error).as_str();
+            "assignment_expression" => {
+                let assignment_expression = handle_assignment_expression(node, src.clone());
+                result += assignment_expression.as_str();
+            },
+            "identifier" => {
+                let identifier = handle_identifier(node, src.clone());
+                result += identifier.as_str();
+            },
+            "qualifier_identified" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
+            },
+            "pointer_expression" => {
+                let pointer_expression = handle_pointer_expression(node, src.clone());
+                result += pointer_expression.as_str();
             },
             "(" => result += "(",
             ")" => result += ")",

Function: fn handle_pointer_declarator(root: Node, src: String) -> String {
--- 
+++ 
@@ -25,10 +25,6 @@
                 let type_identifier = handle_type_identifier(node, src.clone());
                 result += type_identifier.as_str();
             },
-            "type_qualifier" => {
-                let type_qualifier = handle_type_qualifier(node, src.clone());
-                result += type_qualifier.as_str();
-            },
             "field_identifier" => {
                 let field_identifier = handle_field_identifier(node, src.clone());
                 result += field_identifier.as_str();
@@ -37,10 +33,13 @@
                 let array_declarator = handle_array_declarator(node, src.clone());
                 result += format!(" {}", array_declarator).as_str();
             },
+            "reference_declarator" => {
+                let reference_declarator = handle_reference_declarator(node, src.clone());
+                result += format!(" {}", reference_declarator).as_str();
+            },
             _ => println!("You shouldn't be here (pointer_declarator): {}\n", node.kind()),
         }
     }
-    // In order to properly format the stars, first they *all* need to be pushed forward
     result = utils::remove_dereference_spaces(result);
     return result;
 }

Function: fn handle_pointer_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
             },
             "pointer_expression" => {
                 let pointer_expression = handle_inner_pointer_expression(node, src.clone());
@@ -30,10 +34,6 @@
                 let cast_expression = handle_cast_expression(node, src.clone());
                 result += cast_expression.as_str();
             },
-            "unary_expression" => {
-                let unary_expression = handle_unary_expression(node, src.clone());
-                result += unary_expression.as_str();
-            },
             "*" => result += "* ",
             "&" => result += "&",
             ";" => result += ";",

Function: fn handle_preproc_else(root: Node, src: String) -> String {
--- 
+++ 
@@ -9,13 +9,17 @@
                 let return_statement = handle_return_statement(node, src.clone());
                 parts.push(return_statement);
             },
-            "comment" => {
-                let comment = handle_comment(node, src.clone());
-                parts.push(comment);
+            "declaration" => {
+                let declaration = handle_declaration(node, src.clone());
+                parts.push(declaration);
             },
             "expression_statement" => {
                 let expression_statement = handle_expression_statement(node, src.clone());
                 parts.push(expression_statement);
+            },
+            "preproc_def" => {
+                let preproc_def = handle_preproc_def(node, src.clone());
+                parts.push(preproc_def);
             },
             _ => println!("You shouldn't be here (preproc_else): {}\n", node.grammar_name()),
         }

Function: fn handle_preproc_function_def(root: Node, src: String) -> String {
--- 
+++ 
@@ -14,13 +14,12 @@
             },
             "preproc_params" => {
                 let preproc_params = handle_preproc_params(node, src.clone());
-                result.pop();
                 result += format!("{} ", preproc_params).as_str();
             },
             "preproc_arg" => {
                 result += node.utf8_text(src.as_bytes()).unwrap();
             },
-            _ =>  println!("You shouldn't be here (preproc_function_def): {}\n", node.grammar_name()),
+            _ => println!("You shouldn't be here (preproc_function_def): {}\n", node.grammar_name()),
         }
     }
     return result;

Function: fn handle_preproc_if(root: Node, src: String) -> String {
--- 
+++ 
@@ -19,6 +19,14 @@
                 let return_statement = handle_return_statement(node, src.clone());
                 parts.push(return_statement);
             },
+            "declaration" => {
+                let declaration = handle_declaration(node, src.clone());
+                parts.push(declaration);
+            },
+            "if_statement" => {
+                let if_statement = handle_if_statement(node, src.clone());
+                parts.push(if_statement);
+            },
             "function_definition" => {
                 let function_definition = handle_function_definition(node, src.clone());
                 parts.push(function_definition);
@@ -35,10 +43,39 @@
                 let number_literal = handle_number_literal(node, src.clone());
                 parts.push(number_literal);
             },
-            "\n" => {
-                // maybe remove?
-                parts.push("\n".to_string());
+            "expression_statement" => {
+                let expression_statement = handle_expression_statement(node, src.clone());
+                parts.push(expression_statement);
             },
+            "namespace_alias_definition" => {
+                let namespace_alias_definition = handle_namespace_alias_definition(node, src.clone());
+                parts.push(namespace_alias_definition);
+            },
+            "preproc_def" => {
+                let preproc_def = handle_preproc_def(node, src.clone());
+                parts.push(preproc_def);
+            },
+            "preproc_include" => {
+                let preproc_include = handle_preproc_include(node, src.clone());
+                parts.push(preproc_include);
+            },
+            "preproc_elif" => {
+                let preproc_elif = handle_preproc_elif(node, src.clone());
+                parts.push(preproc_elif);
+            },
+            "preproc_defined" => {
+                let preproc_defined = handle_preproc_defined(node, src.clone());
+                temp += preproc_defined.as_str();
+                parts.push(temp);
+                temp = String::new();
+            },
+            "identifier" => {
+                let identifier = handle_identifier(node, src.clone());
+                temp += identifier.as_str();
+                parts.push(temp);
+                temp = String::new();
+            },
+            "\n" => (),
             _ => println!("You shouldn't be here (preproc_if): {}\n", node.grammar_name()),
         }
     }

Function: fn handle_preproc_ifdef(root: Node, src: String) -> String {
--- 
+++ 
@@ -1,71 +1,26 @@
 fn handle_preproc_ifdef(root: Node, src: String) -> String {
     let mut parts = Vec::<String>::new();
     let mut temp = String::new();
-    let mut last_kind = "";
     for node in root.children(&mut root.walk()) {
         match node.grammar_name() {
             "#ifndef" => {
                 temp += "#ifndef ";
-                last_kind = "#ifndef";
             },
             "#ifdef" => {
                 temp += "#ifdef ";
-                last_kind = "#ifdef";
             },
             "#endif" => {
-                parts.push("\n#endif".to_string());
-                last_kind = "#endif";
+                parts.push("#endif".to_string());
             },
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 temp += identifier.as_str();
                 parts.push(temp);
                 temp = String::new();
-                last_kind = "identifier";
             },
             "preproc_def" => {
-                let preproc_def = handle_preproc_def(node, src.clone()) + "\n";
+                let preproc_def = handle_preproc_def(node, src.clone());
                 parts.push(preproc_def);
-                last_kind = "preproc_def";
-            },
-            "preproc_include" => {
-                let preproc_include = handle_preproc_include(node, src.clone());
-                parts.push(preproc_include);
-                last_kind = "preproc_include";
-            },
-            "comment" => {
-                let comment = handle_comment(node, src.clone());
-                parts.push(comment);
-                last_kind = "comment";
-            },
-            "expression_statement" => {
-                let expression_statement = handle_expression_statement(node, src.clone());
-                parts.push(expression_statement);
-                last_kind = "expression_statement";
-            },
-            "function_definition" => {
-                let function_definition = handle_function_definition(node, src.clone());
-                parts.push(function_definition);
-                last_kind = "function_definition";
-            },
-            "if_statement" => {
-                let if_statement = handle_if_statement(node, src.clone());
-                parts.push(if_statement);
-                last_kind = "if_statement";
-            },
-            "preproc_else" => {
-                let preproc_else = handle_preproc_else(node, src.clone());
-                parts.push(preproc_else);
-                last_kind = "preproc_else";
-            },
-            "declaration" => {
-                let mut declaration = handle_declaration(node, src.clone());
-                if declaration.contains("*") {
-                    declaration = utils::remove_pointer_spaces(declaration);
-                }
-                if last_kind != "declaration" { declaration = format!("\n{}", declaration); }
-                parts.push(declaration);
-                last_kind = "declaration";
             },
             _ => println!("You shouldn't be here (preproc_ifdef): {}\n", node.grammar_name()),
         }

Function: fn handle_return_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -4,60 +4,64 @@
     for node in root.children(&mut root.walk()) {
         match node.grammar_name() {
             "compound_statement" => {
-                let compound_statement = handle_compound_statement(node.clone(), src.clone());
+                let compound_statement = handle_compound_statement(node, src.clone());
                 parts.push(compound_statement);
             },
             "call_expression" => {
-                let call_expression = handle_call_expression(node.clone(), src.clone());
+                let call_expression = handle_call_expression(node, src.clone());
                 parts.push(call_expression);
             },
             "binary_expression" => {
-                let binary_expression = handle_binary_expression(node.clone(), src.clone());
+                let binary_expression = handle_binary_expression(node, src.clone());
                 parts.push(binary_expression);
             },
             "unary_expression" => {
-                let unary_expression = handle_unary_expression(node.clone(), src.clone());
+                let unary_expression = handle_unary_expression(node, src.clone());
                 parts.push(unary_expression);
             },
             "identifier" => {
-                let identifier = handle_identifier(node.clone(), src.clone());
+                let identifier = handle_identifier(node, src.clone());
                 parts.push(identifier);
             },
             "conditional_expression" => {
-                let conditional_expression = handle_conditional_expression(node.clone(), src.clone());
+                let conditional_expression = handle_conditional_expression(node, src.clone());
                 parts.push(conditional_expression);
             },
             "field_expression" => {
-                let field_expression = handle_field_expression(node.clone(), src.clone());
+                let field_expression = handle_field_expression(node, src.clone());
                 parts.push(field_expression);
             },
             "cast_expression" => {
-                let cast_expression = handle_cast_expression(node.clone(), src.clone());
+                let cast_expression = handle_cast_expression(node, src.clone());
                 parts.push(cast_expression);
             },
             "number_literal" => {
-                let number_literal = handle_number_literal(node.clone(), src.clone());
+                let number_literal = handle_number_literal(node, src.clone());
                 parts.push(number_literal);
             },
             "char_literal" => {
-                let char_literal = handle_char_literal(node.clone(), src.clone());
+                let char_literal = handle_char_literal(node, src.clone());
                 parts.push(char_literal);
             },
             "string_literal" => {
-                let string_literal = handle_string_literal(node.clone(), src.clone());
+                let string_literal = handle_string_literal(node, src.clone());
                 parts.push(string_literal);
             },
             "subscript_expression" => {
-                let subscript_expression = handle_subscript_expression(node.clone(), src.clone());
+                let subscript_expression = handle_subscript_expression(node, src.clone());
                 parts.push(subscript_expression);
             },
             "pointer_expression" => {
-                let pointer_expression = handle_pointer_expression(node.clone(), src.clone());
+                let pointer_expression = handle_pointer_expression(node, src.clone());
                 parts.push(pointer_expression);
             },
             "parenthesized_expression" => {
-                let parenthesized_expression = handle_parenthesized_expression(node.clone(), src.clone());
+                let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
                 parts.push(parenthesized_expression);
+            },
+            "initializer_list" => {
+                let initializer_list = handle_initializer_list(node, src.clone());
+                parts.push(initializer_list);
             },
             "return" => {
                 parts.push("return".to_string());

Function: fn handle_storage_class_specifier(root: Node, src: String) -> String {
--- 
+++ 
@@ -2,10 +2,11 @@
     let mut result = String::new();
     for node in root.children(&mut root.walk()) {
         match node.grammar_name() {
-            "static" => result += "static",
-            "extern" => result += "extern",
+            "static" => result += "static ",
+            "inline" => result += "inline ",
             _ => println!("You shouldn't be here (storage_class_specifier): {}\n", node.grammar_name()),
         }
     }
+    result = result.trim_end().to_string();
     return result;
 }

Function: fn handle_subscript_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -44,6 +44,10 @@
                 let pointer_expression = handle_pointer_expression(node, src.clone());
                 result += pointer_expression.as_str();
             },
+            "subscript_argument_list" => {
+                let subscript_argument_list = handle_subscript_argument_list(node, src.clone());
+                result += subscript_argument_list.as_str();
+            },
             _ => println!("You shouldn't be here (subscript_expression): {}\n", node.grammar_name()),
         }
     }

Function: fn handle_switch_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -11,6 +11,10 @@
                 let parenthesized_expression = handle_parenthesized_expression(node, src.clone());
                 result += format!("{} ", parenthesized_expression).as_str();
             },
+            "condition_clause" => {
+                let condition_clause = handle_condition_clause(node, src.clone());
+                result += format!("{} ", condition_clause).as_str();
+            },
             _ => println!("You shouldn't be here (switch_statement): {}\n", node.grammar_name()),
         }
     }

Function: fn handle_type_descriptor(root: Node, src: String) -> String {
--- 
+++ 
@@ -5,6 +5,10 @@
             "identifier" => {
                 let identifier = handle_identifier(node, src.clone());
                 result += identifier.as_str();
+            },
+            "qualified_identifier" => {
+                let qualified_identifier = handle_qualified_identifier(node, src.clone());
+                result += qualified_identifier.as_str();
             },
             "primitive_type" => {
                 let primitive_type = handle_primitive_type(node, src.clone());
@@ -22,7 +26,19 @@
                 let sized_type_specifier = handle_sized_type_specifier(node, src.clone());
                 result += sized_type_specifier.as_str();
             },
-            _ => println!("You shouldn't be here (type_descriptor): {}", node.grammar_name()),
+            "template_type" => {
+                let template_type = handle_template_type(node, src.clone());
+                result += format!("{} ", template_type).as_str();
+            },
+            "type_qualifier" => {
+                let type_qualifier = handle_type_qualifier(node, src.clone());
+                result += format!("{} ", type_qualifier).as_str();
+            },
+            "abstract_reference_declarator" => {
+                let abstract_reference_declarator = handle_abstract_reference_declarator(node, src.clone());
+                result += format!("{} ", abstract_reference_declarator).as_str();
+            },
+            _ => println!("You shouldn't be here (type_descriptor): {}\n", node.grammar_name()),
         }
     }
     return result;

Function: fn handle_unary_expression(root: Node, src: String) -> String {
--- 
+++ 
@@ -30,14 +30,6 @@
                 let assignment_expression = handle_assignment_expression(node, src.clone());
                 result += assignment_expression.as_str();
             },
-            "subscript_expression" => {
-                let subscript_expression = handle_subscript_expression(node, src.clone());
-                result += subscript_expression.as_str();
-            },
-            "ERROR" => {
-                let error = handle_error(node, src.clone());
-                result += format!("{} ", error).as_str();
-            },
             "!" => result += "!",
             "~" => result += "~",
             "-" => result += "-",

Function: fn handle_while_statement(root: Node, src: String) -> String {
--- 
+++ 
@@ -21,6 +21,10 @@
                 let switch_statement = handle_switch_statement(node, src.clone());
                 parts.push(switch_statement);
             },
+            "condition_clause" => {
+                let condition_clause = handle_condition_clause(node, src.clone());
+                parts.push(condition_clause);
+            },
             _ => println!("You shouldn't be here (while_statement): {}\n", node.grammar_name()),
         }
     }

