Finished includes: #include <string.h>

Finished includes: #include "example_header.h" // stdio.h, stdlib.h, string.h, stdbool.h

Finished includes: #include <stdio.h>

Finished includes: #include <stdlib.h>

Finished includes: #include <stdbool.h>

Finished declaration: void strAppend(string* original, const char* suffix);

Finished declaration: string** strSplit(string* original, const char delim);

identifier: strArrLen

parameter_list: (string** strArr)

Add an open brace here.

Finished declaration: size_t result = 0;

parenthesized_expression: (strArr[result] != NULL)

expression_statement: result++;

Finished return: return result;

Add a closing brace here.

*: *

function_declarator: strArrJoin(string** arr, const char* delim)

Add an open brace here.

Finished declaration: size_t len = 0;

parenthesized_expression: (arr[len] != NULL)

expression_statement: len++;

Finished declaration: string* result = str("");

for: for

(: (

declaration: size_t i = 0;

binary_expression: i < len

;: ;

update_expression: i ++

): )

Add an open brace here.

call_expression: strAppend(result, arr[i]->data)

;: ;

Add a semicolon...

call_expression: strAppend(result, delim)

;: ;

Add a semicolon...

Add a closing brace here.

Finished return: return result;

Add a closing brace here.

Finished comment:
/*
This is a test
of having a block comment
*/

identifier: strAppend

parameter_list: (string* original, const char* suffix)

Add an open brace here.

Finished declaration: size_t newLen = original->length + strlen(suffix) + 1;

Finished declaration: char* newData = (char*)realloc(original->data, newLen);

if: if

parenthesized_expression: (!newData)

Add an open brace here.

call_expression: perror("Failed to reallocate memory for new string.")

;: ;

Add a semicolon...

call_expression: exit(EXIT_FAILURE)

;: ;

Add a semicolon...

Add a closing brace here.

call_expression: strcat(newData, suffix)

;: ;

Add a semicolon...

assignment_expression: original->data = newData

;: ;

Add a semicolon...

assignment_expression: original->length = newLen

;: ;

Add a semicolon...

Add a closing brace here.

Finished comment:
/* This is another,
slightly harder test */

*: *

pointer_declarator: * strSplit(string* original, const char delim)

Add an open brace here.

Finished declaration: string** result;

Finished declaration: size_t len = 0;

for: for

(: (

declaration: size_t i = 0;

binary_expression: i < original->length

;: ;

update_expression: i++

): )

Add an open brace here.

if: if

parenthesized_expression: (original->data[i] == delim)

Add an open brace here.

update_expression: len++

;: ;

Add a semicolon...

Add a closing brace here.

Add a closing brace here.

assignment_expression: result = (string**)malloc(sizeof(string*) * (len + 2))

;: ;

Add a semicolon...

Finished declaration: size_t n = 0;

Finished declaration: char* c = (char*)malloc(2);

assignment_expression: c[1] = '\0'

;: ;

Add a semicolon...

Finished declaration: string* temp = str("");

Finished comment:
    /*
    And this is a block comment inside a function!
    */
for: for

(: (

declaration: size_t i = 0;

binary_expression: i < original->length

;: ;

update_expression: i++

): )

Add an open brace here.

if: if

parenthesized_expression: (original->data[i] == delim)

Add an open brace here.

Finished declaration: string* template = strCopy(temp);

assignment_expression: result[n] = template

;: ;

Add a semicolon...

call_expression: strClear(temp)

;: ;

Add a semicolon...

update_expression: n++

;: ;

Add a semicolon...

continue: continue

;: ;

Add a closing brace here.

assignment_expression: c[0] = original->data[i]

;: ;

Add a semicolon...

call_expression: strAppend(temp, c)

;: ;

Add a semicolon...

Add a closing brace here.

if: if

parenthesized_expression: (strcmp(temp->data, "") != 0)

Add an open brace here.

Finished declaration: string* template = strCopy(temp);

assignment_expression: result[n] = template

;: ;

Add a semicolon...

update_expression: n++

;: ;

Add a semicolon...

Add a closing brace here.

assignment_expression: result[n] = NULL

;: ;

Add a semicolon...

call_expression: free(c)

;: ;

Add a semicolon...

call_expression: strFree(temp)

;: ;

Add a semicolon...

Finished return: return result;

Add a closing brace here.

identifier: strArrFree

parameter_list: (string** original)

Add an open brace here.

Finished declaration: const int test = 5;

if: if

parenthesized_expression: (original)

Add an open brace here.

Finished declaration: size_t i = 0;

parenthesized_expression: (original[i] != NULL)

Add an open brace here.

call_expression: strFree(original[i])

;: ;

Add a semicolon...

update_expression: i++

;: ;

Add a semicolon...

Add a closing brace here.

call_expression: free(original)

;: ;

Add a semicolon...

Add a closing brace here.

Add a closing brace here.

*: *

function_declarator: strCopy(string* original)

Add an open brace here.

Finished return: return str(original->data);

Add a closing brace here.

*: *

function_declarator: substr(string* original, size_t start, size_t end)

Add an open brace here.

Finished declaration: size_t len = end - start;

Finished declaration: char* temp = (char*)malloc(len+1);

call_expression: strncpy(temp, original->data+start, len)

;: ;

Add a semicolon...

assignment_expression: temp[len] = '\0'

;: ;

Add a semicolon...

Finished declaration: string* result;

assignment_expression: result = str(temp)

;: ;

Add a semicolon...

call_expression: free(temp)

;: ;

Add a semicolon...

Finished return: return result;

Add a closing brace here.

identifier: strIsEmpty

parameter_list: (string* str)

Add an open brace here.

if: if

parenthesized_expression: (str->length == 0 || strlen(str->data) < 1)

Add an open brace here.

Finished return: return true;

Add a closing brace here.

else_clause: else
    {
        return false;
    }

Add a closing brace here.

*: *

function_declarator: str(const char* text)

Add an open brace here.

Finished declaration: string* result = (string*)malloc(sizeof(string));

if: if

parenthesized_expression: (!result)

Add an open brace here.

call_expression: perror("Failed to allocate memory for string\n")

;: ;

Add a semicolon...

call_expression: exit(EXIT_FAILURE)

;: ;

Add a semicolon...

Add a closing brace here.

assignment_expression: result->length = strlen(text)

;: ;

Add a semicolon...

assignment_expression: result->data = (char*)malloc(result->length + 1)

;: ;

Add a semicolon...

if: if

parenthesized_expression: (!result->data)

Add an open brace here.

call_expression: perror("Failed to allocate memory for string data\n")

;: ;

Add a semicolon...

call_expression: free(result)

;: ;

Add a semicolon...

call_expression: exit(EXIT_FAILURE)

;: ;

Add a semicolon...

Add a closing brace here.

call_expression: strcpy(result->data, text)

;: ;

Add a semicolon...

Finished return: return result;

Add a closing brace here.

identifier: strFree

parameter_list: (string* str)

Add an open brace here.

if: if

parenthesized_expression: (str)

Add an open brace here.

call_expression: free(str->data)

;: ;

Add a semicolon...

call_expression: free(str)

;: ;

Add a semicolon...

Add a closing brace here.

else_clause: else {
        // nothing happens
    }

Add a closing brace here.

identifier: strClear

parameter_list: (string* str)

Add an open brace here.

Finished declaration: char* newData = (char*)realloc(str->data, 1);

if: if

parenthesized_expression: (!newData)

Add an open brace here.

call_expression: perror("Failed to reallocate memory for cleared string.")

;: ;

Add a semicolon...

call_expression: exit(EXIT_FAILURE)

;: ;

Add a semicolon...

Add a closing brace here.

assignment_expression: newData[0] = '\0'

;: ;

Add a semicolon...

assignment_expression: str->data = newData

;: ;

Add a semicolon...

assignment_expression: str->length = 0

;: ;

Add a semicolon...

Add a closing brace here.

